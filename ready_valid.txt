//Warning, I may be abusing or misusing Haskell notation
//Also warning, This is slightly different from Rigel notation.

//Terminology
//us == Upstream
//ds == Downstream
//R = ready
//V = valid
//RV = ready valid

T, A, B â€” These represent Types

R(T) This is a new type which represents T with a ready signal
R :: T -> R(T)

V(T) This is a new type which represents T with a valid signal
V :: T -> V(T)

RV(T) has both a ready and valid associated with T
RV :: T -> RV(T)

Identities:
R (R T) == R T == R(T)
V (V T) == V T == V(T)
R (V T) == RV T == RV(T)
V (R T) == RV T == RV(T)

Higher order operations to "lift" interfaces
lift_R :: (A -> B) -> ( R(A) -> R(B) )
lift_V :: (A -> B) -> ( V(A) -> V(B) )
lift_RV :: (A -> B) -> ( RV(A) -> RV(B) )

Claim: All dataflow module interfaces can be represented by the following (assuming A and B are "basic")

Interface = A -> B
          | R(A) -> B
          | A -> V(B)
          | R(A) -> V(B)
          | lift_R Interface
          | lift_V Interface
          | lift_RV Interface


Example functions
add :: A -> B  // will likely have A == (T,T)
downsample :: A -> V(B)
upsample1 :: R(A) -> B
upsample2 :: R(A) -> V(B)


//Which cases are doable in hardware?
f :: A ->B
fR :: R(A) ->B
fV :: A -> V(B)
fRV :: R(A) -> V(B)

lift_R f   //Set us_R = ds_R, stall all state with ds_R
lift_R fV  //Set us_R = ds_R, stall all state with ds_R
lift_R fR  //Set us_R = ds_R || f.us_R, Stall all state with ds_R
lift_R fRV //Set us_R = ds_R || f.us_R, Stall all state with ds_R

lift_V f   //Need latency L. Create register chain of size L driven by us_V and drives ds_V
lift_V fV  //Need Latency L. Create register chain of size L driven by us_V. "and" the output with f.ds_V
lift_V fR  //TODO Not sure if this is doable for a generic fR. Kayvon, what we discussed does not work for a weird upsample like "pad". 
lift_R fRV //TODO Not sure if this is doable for a generic fR

//TODO are these composable from above?
lift_RV f
lift_RV fV
lift_RV fR
lift_RV fRV



//Supported Rigel lift functions in Rigel Readme
//His notation A -> RV(B) == My notation R(A) -> V(A)
//Note I am converting his notation to my notation. His notation puts the R on the other side.
//One minor issue which I am unsure of is he has Handshake(A) -> Handshake(B) which I assume means RV(A) -> RV(B)
//But he also has RV(A) -> RV(B) for RPassthrough. Unsure of what the difference between these are

liftBasic :: (A -> B) -> (A -> V(B) ) //I do not understand the semantics of this...
liftDecimate :: (A -> V(B)) -> (RV(A) -> V(B)) //Also do not understand semantics of this one...
liftHandshake :: (RV(A) -> V(B) ) -> (RV(A) -> RV(B) ) //Equivelent to applying lift_R
makeHandshake :: (A -> B) -> (RV(A) -> RV(B) ) // Equivelent to lift_RV
RPassthrough :: (RV(A) -> V(B) ) -> (RV(A) -> RV(B) ) // How is this different than liftHandshake ??
waitOnInput :: (R(A) -> V(B) ) -> (RV(A) -> V(B)) // same as my lift_V
