import fault
import aetherling.helpers.fault_helpers as fault_helpers
from aetherling.space_time import *
from aetherling.space_time.reshape_st import DefineReshape_ST
import magma as m

@cache_definition 
def Module_0() -> DefineCircuitKind:
    class _Module_0(Circuit):
        name = "Module_0"
        IO = ['I', In(ST_SSeq(3, ST_TSeq(3, 0, ST_Int())).magma_repr()), 'O', Out(ST_SSeq(1, ST_TSeq(1, 2, ST_Int())).magma_repr())] + ClockInterface(has_ce=False,has_reset=False) + valid_ports
        st_in_t = [ST_SSeq(3, ST_TSeq(3, 0, ST_Int()))]
        st_out_t = ST_SSeq(1, ST_TSeq(1, 2, ST_Int()))
        binary_op = False
        @classmethod
        def definition(cls):
            n138 = DefineConst(ST_SSeq(3, ST_TSeq(3, 0, ST_Int())), ((0,1,0,),(1,2,1,),(0,1,0,),), has_valid=True, delay=2)()
            wire(cls.valid_up, n138.valid_up)
            n140 = DefineMap2_S(3, DefineMap2_T(3, 0, DefineAtomTupleCreator(ST_Int(), ST_Int(), has_valid=True)),True)()
            wire(cls.I, n140.I0)
            wire(n138.O, n140.I1)
            wire(cls.valid_up & n138.valid_down, n140.valid_up)
            n151 = DefineMap_S(3, DefineMap_T(3, 0, DefineLShift_Atom(True)),True)()
            wire(n140.O, n151.I)
            wire(n140.valid_down, n151.valid_up)
            n156 = DefineMap_S(3, DefineReduce_T(3, 0, DefineAdd_Atom(False)),True)()
            wire(n151.O, n156.I)
            wire(n151.valid_down, n156.valid_up)
            n161 = DefineReduce_S(3, DefineMap_T(1, 2, DefineAdd_Atom(False)), has_valid=True)()
            wire(n156.O, n161.I)
            wire(n156.valid_down, n161.valid_up)
            n162 = DefineConst(ST_SSeq(1, ST_TSeq(1, 2, ST_Int())), (4,0,0,), has_valid=True, delay=6)()
            wire(cls.valid_up, n162.valid_up)
            n164 = DefineMap2_S(1, DefineMap2_T(1, 2, DefineAtomTupleCreator(ST_Int(), ST_Int(), has_valid=True)),True)()
            wire(n161.O, n164.I0)
            wire(n162.O, n164.I1)
            wire(n161.valid_down & n162.valid_down, n164.valid_up)
            n175 = DefineMap_S(1, DefineMap_T(1, 2, DefineRShift_Atom(True)),True)()
            wire(n164.O, n175.I)
            wire(n164.valid_down, n175.valid_up)
            wire(n175.O, cls.O)
            wire(n175.valid_down, cls.valid_down)
    return _Module_0

@cache_definition 
def Module_1() -> DefineCircuitKind:
    class _Module_1(Circuit):
        name = "Module_1"
        IO = ['I', In(ST_SSeq(3, ST_TSeq(3, 0, ST_Int())).magma_repr()), 'O', Out(ST_SSeq(1, ST_TSeq(1, 2, ST_Int())).magma_repr())] + ClockInterface(has_ce=False,has_reset=False) + valid_ports
        st_in_t = [ST_SSeq(3, ST_TSeq(3, 0, ST_Int()))]
        st_out_t = ST_SSeq(1, ST_TSeq(1, 2, ST_Int()))
        binary_op = False
        @classmethod
        def definition(cls):
            n324 = DefineConst(ST_SSeq(3, ST_TSeq(3, 0, ST_Int())), ((0,1,0,),(1,2,1,),(0,1,0,),), has_valid=True, delay=92)()
            wire(cls.valid_up, n324.valid_up)
            n326 = DefineMap2_S(3, DefineMap2_T(3, 0, DefineAtomTupleCreator(ST_Int(), ST_Int(), has_valid=True)),True)()
            wire(cls.I, n326.I0)
            wire(n324.O, n326.I1)
            wire(cls.valid_up & n324.valid_down, n326.valid_up)
            n337 = DefineMap_S(3, DefineMap_T(3, 0, DefineLShift_Atom(True)),True)()
            wire(n326.O, n337.I)
            wire(n326.valid_down, n337.valid_up)
            n342 = DefineMap_S(3, DefineReduce_T(3, 0, DefineAdd_Atom(False)),True)()
            wire(n337.O, n342.I)
            wire(n337.valid_down, n342.valid_up)
            n347 = DefineReduce_S(3, DefineMap_T(1, 2, DefineAdd_Atom(False)), has_valid=True)()
            wire(n342.O, n347.I)
            wire(n342.valid_down, n347.valid_up)
            n348 = DefineConst(ST_SSeq(1, ST_TSeq(1, 2, ST_Int())), (4,0,0,), has_valid=True, delay=96)()
            wire(cls.valid_up, n348.valid_up)
            n350 = DefineMap2_S(1, DefineMap2_T(1, 2, DefineAtomTupleCreator(ST_Int(), ST_Int(), has_valid=True)),True)()
            wire(n347.O, n350.I0)
            wire(n348.O, n350.I1)
            wire(n347.valid_down & n348.valid_down, n350.valid_up)
            n361 = DefineMap_S(1, DefineMap_T(1, 2, DefineRShift_Atom(True)),True)()
            wire(n350.O, n361.I)
            wire(n350.valid_down, n361.valid_up)
            wire(n361.O, cls.O)
            wire(n361.valid_down, cls.valid_down)
    return _Module_1

@cache_definition 
def Module_2() -> DefineCircuitKind:
    class _Module_2(Circuit):
        name = "top"
        IO = ['hi', In(ST_TSeq(32, 32, ST_SSeq(2, ST_SSeq(1, ST_TSeq(1, 2, ST_Int())))).magma_repr()), 'O', Out(ST_TSeq(4, 60, ST_SSeq(1, ST_TSeq(1, 2, ST_Int()))).magma_repr())] + ClockInterface(has_ce=False,has_reset=False) + valid_ports
        st_in_t = [ST_TSeq(32, 32, ST_SSeq(2, ST_SSeq(1, ST_TSeq(1, 2, ST_Int()))))]
        st_out_t = ST_TSeq(4, 60, ST_SSeq(1, ST_TSeq(1, 2, ST_Int())))
        IO += ['fst_conv_in', Out(ST_TSeq(32, 32, ST_SSeq(2, ST_SSeq(3, ST_TSeq(3, 0, ST_Int())))).magma_repr())]
        IO += ['fst_down_in', Out(ST_TSeq(32, 32, ST_SSeq(2, ST_SSeq(1, ST_TSeq(1, 2, ST_Int())))).magma_repr())]
        IO += ['fst_down_out', Out(ST_TSeq(32, 32, ST_SSeq(1, ST_SSeq(1, ST_TSeq(1, 2, ST_Int())))).magma_repr())]
        binary_op = False
        @classmethod
        def definition(cls):
            n1 = DefineFIFO(ST_TSeq(32, 32, ST_SSeq(2, ST_SSeq(1, ST_TSeq(1, 2, ST_Int())))), 1, has_valid=True)()
            wire(cls.hi, n1.I)
            wire(cls.valid_up, n1.valid_up)
            n2 = DefineShift_TS(32, 32, 2, 8, ST_SSeq(1, ST_TSeq(1, 2, ST_Int())), has_valid=True)()
            wire(n1.O, n2.I)
            wire(n1.valid_down, n2.valid_up)
            n3 = DefineShift_TS(32, 32, 2, 8, ST_SSeq(1, ST_TSeq(1, 2, ST_Int())), has_valid=True)()
            wire(n2.O, n3.I)
            wire(n2.valid_down, n3.valid_up)
            n4 = DefineShift_TS(32, 32, 2, 1, ST_SSeq(1, ST_TSeq(1, 2, ST_Int())), has_valid=True)()
            wire(n3.O, n4.I)
            wire(n3.valid_down, n4.valid_up)
            n5 = DefineShift_TS(32, 32, 2, 1, ST_SSeq(1, ST_TSeq(1, 2, ST_Int())), has_valid=True)()
            wire(n4.O, n5.I)
            wire(n4.valid_down, n5.valid_up)
            n6 = DefineMap2_T(32, 32, DefineMap2_S(2, DefineMap2_S(1, DefineMap2_T(1, 2, DefineSSeqTupleCreator(ST_Int(), has_valid=True)),True),True))()
            wire(n5.O, n6.I0)
            wire(n4.O, n6.I1)
            wire(n5.valid_down & n4.valid_down, n6.valid_up)
            n19 = DefineMap2_T(32, 32, DefineMap2_S(2, DefineMap2_S(1, DefineMap2_T(1, 2, DefineSSeqTupleAppender(ST_Int(), 2, has_valid=True)),True),True))()
            wire(n6.O, n19.I0)
            wire(n3.O, n19.I1)
            wire(n6.valid_down & n3.valid_down, n19.valid_up)
            n38 = DefineMap_T(32, 32, DefineMap_S(2, DefineMap_S(1, DefineSerialize(3, 0, ST_Int()),True),True))()
            wire(n19.O, n38.I)
            wire(n19.valid_down, n38.valid_up)
            n39 = DefineShift_TS(32, 32, 2, 1, ST_SSeq(1, ST_TSeq(1, 2, ST_Int())), has_valid=True)()
            wire(n2.O, n39.I)
            wire(n2.valid_down, n39.valid_up)
            n40 = DefineShift_TS(32, 32, 2, 1, ST_SSeq(1, ST_TSeq(1, 2, ST_Int())), has_valid=True)()
            wire(n39.O, n40.I)
            wire(n39.valid_down, n40.valid_up)
            n41 = DefineMap2_T(32, 32, DefineMap2_S(2, DefineMap2_S(1, DefineMap2_T(1, 2, DefineSSeqTupleCreator(ST_Int(), has_valid=True)),True),True))()
            wire(n40.O, n41.I0)
            wire(n39.O, n41.I1)
            wire(n40.valid_down & n39.valid_down, n41.valid_up)
            n54 = DefineMap2_T(32, 32, DefineMap2_S(2, DefineMap2_S(1, DefineMap2_T(1, 2, DefineSSeqTupleAppender(ST_Int(), 2, has_valid=True)),True),True))()
            wire(n41.O, n54.I0)
            wire(n2.O, n54.I1)
            wire(n41.valid_down & n2.valid_down, n54.valid_up)
            n73 = DefineMap_T(32, 32, DefineMap_S(2, DefineMap_S(1, DefineSerialize(3, 0, ST_Int()),True),True))()
            wire(n54.O, n73.I)
            wire(n54.valid_down, n73.valid_up)
            n74 = DefineMap2_T(32, 32, DefineMap2_S(2, DefineMap2_S(1, DefineSSeqTupleCreator(ST_TSeq(3, 0, ST_Int()), has_valid=True),True),True))()
            wire(n38.O, n74.I0)
            wire(n73.O, n74.I1)
            wire(n38.valid_down & n73.valid_down, n74.valid_up)
            n84 = DefineShift_TS(32, 32, 2, 1, ST_SSeq(1, ST_TSeq(1, 2, ST_Int())), has_valid=True)()
            wire(n1.O, n84.I)
            wire(n1.valid_down, n84.valid_up)
            n85 = DefineShift_TS(32, 32, 2, 1, ST_SSeq(1, ST_TSeq(1, 2, ST_Int())), has_valid=True)()
            wire(n84.O, n85.I)
            wire(n84.valid_down, n85.valid_up)
            n86 = DefineMap2_T(32, 32, DefineMap2_S(2, DefineMap2_S(1, DefineMap2_T(1, 2, DefineSSeqTupleCreator(ST_Int(), has_valid=True)),True),True))()
            wire(n85.O, n86.I0)
            wire(n84.O, n86.I1)
            wire(n85.valid_down & n84.valid_down, n86.valid_up)
            n99 = DefineMap2_T(32, 32, DefineMap2_S(2, DefineMap2_S(1, DefineMap2_T(1, 2, DefineSSeqTupleAppender(ST_Int(), 2, has_valid=True)),True),True))()
            wire(n86.O, n99.I0)
            wire(n1.O, n99.I1)
            wire(n86.valid_down & n1.valid_down, n99.valid_up)
            n118 = DefineMap_T(32, 32, DefineMap_S(2, DefineMap_S(1, DefineSerialize(3, 0, ST_Int()),True),True))()
            wire(n99.O, n118.I)
            wire(n99.valid_down, n118.valid_up)
            n119 = DefineMap2_T(32, 32, DefineMap2_S(2, DefineMap2_S(1, DefineSSeqTupleAppender(ST_TSeq(3, 0, ST_Int()), 2, has_valid=True),True),True))()
            wire(n74.O, n119.I0)
            wire(n118.O, n119.I1)
            wire(n74.valid_down & n118.valid_down, n119.valid_up)
            n135 = DefineMap_T(32, 32, DefineMap_S(2, DefineRemove_1_S(DefineSTupleToSSeq(ST_TSeq(3, 0, ST_Int()), 3, has_valid=True),True),True))()
            wire(n119.O, n135.I)
            wire(n119.valid_down, n135.valid_up)
            n177 = DefineMap_T(32, 32, DefineMap_S(2, Module_0(),True))()
            wire(n135.O, cls.fst_conv_in)
            wire(n135.O, n177.I)
            wire(n135.valid_down, n177.valid_up)
            n180 = DefineMap_T(32, 32, DefineDown_S(2, 1, ST_SSeq(1, ST_TSeq(1, 2, ST_Int())), has_valid=True))()
            wire(n177.O, cls.fst_down_in)
            wire(n180.O, cls.fst_down_out)
            wire(n177.O, n180.I)
            wire(n177.valid_down, n180.valid_up)
            n181 = DefineReshape_ST(ST_TSeq(32, 32, ST_SSeq(1, ST_SSeq(1, ST_TSeq(1, 2, ST_Int())))), ST_TSeq(16, 48, ST_SSeq(2, ST_SSeq(1, ST_TSeq(1, 2, ST_Int())))), has_valid=True)()
            wire(n180.O, n181.I)
            wire(n180.valid_down, n181.valid_up)
            n182 = DefineReshape_ST(ST_TSeq(16, 48, ST_SSeq(2, ST_SSeq(1, ST_TSeq(1, 2, ST_Int())))), ST_TSeq(4, 12, ST_SSeq(2, ST_TSeq(4, 0, ST_SSeq(1, ST_TSeq(1, 2, ST_Int()))))), has_valid=True)()
            wire(n181.O, n182.I)
            wire(n181.valid_down, n182.valid_up)
            n185 = DefineMap_T(4, 12, DefineDown_S(2, 1, ST_TSeq(4, 0, ST_SSeq(1, ST_TSeq(1, 2, ST_Int()))), has_valid=True))()
            wire(n182.O, n185.I)
            wire(n182.valid_down, n185.valid_up)
            n186 = DefineReshape_ST(ST_TSeq(4, 12, ST_SSeq(1, ST_TSeq(4, 0, ST_SSeq(1, ST_TSeq(1, 2, ST_Int()))))), ST_TSeq(4, 12, ST_TSeq(4, 0, ST_SSeq(1, ST_TSeq(1, 2, ST_Int())))), has_valid=True)()
            wire(n185.O, n186.I)
            wire(n185.valid_down, n186.valid_up)
            n187 = DefineReshape_ST(ST_TSeq(4, 12, ST_TSeq(4, 0, ST_SSeq(1, ST_TSeq(1, 2, ST_Int())))), ST_TSeq(8, 56, ST_SSeq(2, ST_SSeq(1, ST_TSeq(1, 2, ST_Int())))), has_valid=True)()
            wire(n186.O, n187.I)
            wire(n186.valid_down, n187.valid_up)
            n188 = DefineShift_TS(8, 56, 2, 4, ST_SSeq(1, ST_TSeq(1, 2, ST_Int())), has_valid=True)()
            wire(n187.O, n188.I)
            wire(n187.valid_down, n188.valid_up)
            n189 = DefineShift_TS(8, 56, 2, 4, ST_SSeq(1, ST_TSeq(1, 2, ST_Int())), has_valid=True)()
            wire(n188.O, n189.I)
            wire(n188.valid_down, n189.valid_up)
            n190 = DefineShift_TS(8, 56, 2, 1, ST_SSeq(1, ST_TSeq(1, 2, ST_Int())), has_valid=True)()
            wire(n189.O, n190.I)
            wire(n189.valid_down, n190.valid_up)
            n191 = DefineShift_TS(8, 56, 2, 1, ST_SSeq(1, ST_TSeq(1, 2, ST_Int())), has_valid=True)()
            wire(n190.O, n191.I)
            wire(n190.valid_down, n191.valid_up)
            n192 = DefineMap2_T(8, 56, DefineMap2_S(2, DefineMap2_S(1, DefineMap2_T(1, 2, DefineSSeqTupleCreator(ST_Int(), has_valid=True)),True),True))()
            wire(n191.O, n192.I0)
            wire(n190.O, n192.I1)
            wire(n191.valid_down & n190.valid_down, n192.valid_up)
            n205 = DefineMap2_T(8, 56, DefineMap2_S(2, DefineMap2_S(1, DefineMap2_T(1, 2, DefineSSeqTupleAppender(ST_Int(), 2, has_valid=True)),True),True))()
            wire(n192.O, n205.I0)
            wire(n189.O, n205.I1)
            wire(n192.valid_down & n189.valid_down, n205.valid_up)
            n224 = DefineMap_T(8, 56, DefineMap_S(2, DefineMap_S(1, DefineSerialize(3, 0, ST_Int()),True),True))()
            wire(n205.O, n224.I)
            wire(n205.valid_down, n224.valid_up)
            n225 = DefineShift_TS(8, 56, 2, 1, ST_SSeq(1, ST_TSeq(1, 2, ST_Int())), has_valid=True)()
            wire(n188.O, n225.I)
            wire(n188.valid_down, n225.valid_up)
            n226 = DefineShift_TS(8, 56, 2, 1, ST_SSeq(1, ST_TSeq(1, 2, ST_Int())), has_valid=True)()
            wire(n225.O, n226.I)
            wire(n225.valid_down, n226.valid_up)
            n227 = DefineMap2_T(8, 56, DefineMap2_S(2, DefineMap2_S(1, DefineMap2_T(1, 2, DefineSSeqTupleCreator(ST_Int(), has_valid=True)),True),True))()
            wire(n226.O, n227.I0)
            wire(n225.O, n227.I1)
            wire(n226.valid_down & n225.valid_down, n227.valid_up)
            n240 = DefineMap2_T(8, 56, DefineMap2_S(2, DefineMap2_S(1, DefineMap2_T(1, 2, DefineSSeqTupleAppender(ST_Int(), 2, has_valid=True)),True),True))()
            wire(n227.O, n240.I0)
            wire(n188.O, n240.I1)
            wire(n227.valid_down & n188.valid_down, n240.valid_up)
            n259 = DefineMap_T(8, 56, DefineMap_S(2, DefineMap_S(1, DefineSerialize(3, 0, ST_Int()),True),True))()
            wire(n240.O, n259.I)
            wire(n240.valid_down, n259.valid_up)
            n260 = DefineMap2_T(8, 56, DefineMap2_S(2, DefineMap2_S(1, DefineSSeqTupleCreator(ST_TSeq(3, 0, ST_Int()), has_valid=True),True),True))()
            wire(n224.O, n260.I0)
            wire(n259.O, n260.I1)
            wire(n224.valid_down & n259.valid_down, n260.valid_up)
            n270 = DefineShift_TS(8, 56, 2, 1, ST_SSeq(1, ST_TSeq(1, 2, ST_Int())), has_valid=True)()
            wire(n187.O, n270.I)
            wire(n187.valid_down, n270.valid_up)
            n271 = DefineShift_TS(8, 56, 2, 1, ST_SSeq(1, ST_TSeq(1, 2, ST_Int())), has_valid=True)()
            wire(n270.O, n271.I)
            wire(n270.valid_down, n271.valid_up)
            n272 = DefineMap2_T(8, 56, DefineMap2_S(2, DefineMap2_S(1, DefineMap2_T(1, 2, DefineSSeqTupleCreator(ST_Int(), has_valid=True)),True),True))()
            wire(n271.O, n272.I0)
            wire(n270.O, n272.I1)
            wire(n271.valid_down & n270.valid_down, n272.valid_up)
            n285 = DefineMap2_T(8, 56, DefineMap2_S(2, DefineMap2_S(1, DefineMap2_T(1, 2, DefineSSeqTupleAppender(ST_Int(), 2, has_valid=True)),True),True))()
            wire(n272.O, n285.I0)
            wire(n187.O, n285.I1)
            wire(n272.valid_down & n187.valid_down, n285.valid_up)
            n304 = DefineMap_T(8, 56, DefineMap_S(2, DefineMap_S(1, DefineSerialize(3, 0, ST_Int()),True),True))()
            wire(n285.O, n304.I)
            wire(n285.valid_down, n304.valid_up)
            n305 = DefineMap2_T(8, 56, DefineMap2_S(2, DefineMap2_S(1, DefineSSeqTupleAppender(ST_TSeq(3, 0, ST_Int()), 2, has_valid=True),True),True))()
            wire(n260.O, n305.I0)
            wire(n304.O, n305.I1)
            wire(n260.valid_down & n304.valid_down, n305.valid_up)
            n321 = DefineMap_T(8, 56, DefineMap_S(2, DefineRemove_1_S(DefineSTupleToSSeq(ST_TSeq(3, 0, ST_Int()), 3, has_valid=True),True),True))()
            wire(n305.O, n321.I)
            wire(n305.valid_down, n321.valid_up)
            n363 = DefineMap_T(8, 56, DefineMap_S(2, Module_1(),True))()
            wire(n321.O, n363.I)
            wire(n321.valid_down, n363.valid_up)
            n366 = DefineMap_T(8, 56, DefineDown_S(2, 1, ST_SSeq(1, ST_TSeq(1, 2, ST_Int())), has_valid=True))()
            wire(n363.O, n366.I)
            wire(n363.valid_down, n366.valid_up)
            n367 = DefineReshape_ST(ST_TSeq(8, 56, ST_SSeq(1, ST_SSeq(1, ST_TSeq(1, 2, ST_Int())))), ST_TSeq(4, 60, ST_SSeq(2, ST_SSeq(1, ST_TSeq(1, 2, ST_Int())))), has_valid=True)()
            wire(n366.O, n367.I)
            wire(n366.valid_down, n367.valid_up)
            n368 = DefineReshape_ST(ST_TSeq(4, 60, ST_SSeq(2, ST_SSeq(1, ST_TSeq(1, 2, ST_Int())))), ST_TSeq(2, 30, ST_SSeq(2, ST_TSeq(2, 0, ST_SSeq(1, ST_TSeq(1, 2, ST_Int()))))), has_valid=True)()
            wire(n367.O, n368.I)
            wire(n367.valid_down, n368.valid_up)
            n371 = DefineMap_T(2, 30, DefineDown_S(2, 1, ST_TSeq(2, 0, ST_SSeq(1, ST_TSeq(1, 2, ST_Int()))), has_valid=True))()
            wire(n368.O, n371.I)
            wire(n368.valid_down, n371.valid_up)
            n372 = DefineReshape_ST(ST_TSeq(2, 30, ST_SSeq(1, ST_TSeq(2, 0, ST_SSeq(1, ST_TSeq(1, 2, ST_Int()))))), ST_TSeq(2, 30, ST_TSeq(2, 0, ST_SSeq(1, ST_TSeq(1, 2, ST_Int())))), has_valid=True)()
            wire(n371.O, n372.I)
            wire(n371.valid_down, n372.valid_up)
            n373 = DefineReshape_ST(ST_TSeq(2, 30, ST_TSeq(2, 0, ST_SSeq(1, ST_TSeq(1, 2, ST_Int())))), ST_TSeq(4, 60, ST_SSeq(1, ST_TSeq(1, 2, ST_Int()))), has_valid=True)()
            wire(n372.O, n373.I)
            wire(n372.valid_down, n373.valid_up)
            n374 = DefineFIFO(ST_TSeq(4, 60, ST_SSeq(1, ST_TSeq(1, 2, ST_Int()))), 1, has_valid=True)()
            wire(n373.O, n374.I)
            wire(n373.valid_down, n374.valid_up)
            n375 = DefineFIFO(ST_TSeq(4, 60, ST_SSeq(1, ST_TSeq(1, 2, ST_Int()))), 1, has_valid=True)()
            wire(n374.O, n375.I)
            wire(n374.valid_down, n375.valid_up)
            wire(n375.O, cls.O)
            wire(n375.valid_down, cls.valid_down)
    return _Module_2

Main = Module_2
fault_inputs0 = [[1,2],[2,3],[3,4],[3,4],[4,5],[5,6],[5,6],[6,7],[7,8],[7,8],[8,9],[9,10],[9,10],[10,11],[11,12],[11,12],[12,13],[13,14],[13,14],[14,15],[15,16],[15,16],[16,17],[17,18],[17,18],[18,19],[19,20],[19,20],[20,21],[21,22],[21,22],[22,23],[23,24],[23,24],[24,25],[25,26],[25,26],[26,27],[27,28],[27,28],[28,29],[29,30],[29,30],[30,31],[31,32],[31,32],[32,33],[33,34],[33,34],[34,35],[35,36],[35,36],[36,37],[37,38],[37,38],[38,39],[39,40],[39,40],[40,41],[41,42],[41,42],[42,43],[43,44],[43,44],[44,45],[45,46],[45,46],[46,47],[47,48],[47,48],[48,49],[49,50],[49,50],[50,51],[51,52],[51,52],[52,53],[53,54],[53,54],[54,55],[55,56],[55,56],[56,57],[57,58],[57,58],[58,59],[59,60],[59,60],[60,61],[61,62],[61,62],[62,63],[63,64],[63,64],[64,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]]
fault_inputs0_valid = [True,False,False,True,False,False,True,False,False,True,False,False,True,False,False,True,False,False,True,False,False,True,False,False,True,False,False,True,False,False,True,False,False,True,False,False,True,False,False,True,False,False,True,False,False,True,False,False,True,False,False,True,False,False,True,False,False,True,False,False,True,False,False,True,False,False,True,False,False,True,False,False,True,False,False,True,False,False,True,False,False,True,False,False,True,False,False,True,False,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False]
fault_output = [253,253,253,253,253,5,253,5,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
fault_output_valid = [True,False,False,True,False,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False]
if __name__ == '__main__':
    mod = Main()
    tester = fault.Tester(mod, clock(mod.CLK))
    tester.circuit.valid_up = 1
    output_counter = 0
    for f_clk in range(192 + 118):
        tester.print('clk: {}\n'.format(f_clk))
        if f_clk < 192 and fault_inputs0_valid[f_clk]:
            fault_helpers.set_nested_port(tester, tester.circuit.hi, fault_inputs0[f_clk], num_nested_space_layers(ST_TSeq(32, 32, ST_SSeq(2, ST_SSeq(1, ST_TSeq(1, 2, ST_Int()))))), 0)
            tester.print("hi: ")
            fault_helpers.print_nested_port(tester, tester.circuit.hi, num_nested_space_layers(ST_TSeq(32, 32, ST_SSeq(2, ST_SSeq(1, ST_TSeq(1, 2, ST_Int()))))))
            tester.print("\n")
        tester.eval()
        if f_clk > 118:
            output_counter += 1
        tester.print("O: ")
        fault_helpers.print_nested_port(tester, tester.circuit.O, num_nested_space_layers(ST_TSeq(4, 60, ST_SSeq(1, ST_TSeq(1, 2, ST_Int())))))
        tester.print("\n")
        tester.print("first conv in: ")
        fault_helpers.print_nested_port(tester, tester.circuit.fst_conv_in, num_nested_space_layers(ST_TSeq(32, 32, ST_SSeq(2, ST_SSeq(3, ST_TSeq(3, 0, ST_Int()))))))
        tester.print("\n")
        tester.print("first down in: ")
        fault_helpers.print_nested_port(tester, tester.circuit.fst_down_in, num_nested_space_layers(ST_TSeq(32, 32, ST_SSeq(2, ST_SSeq(1, ST_TSeq(1, 2, ST_Int()))))))
        tester.print("\n")
        tester.print("first down out: ")
        fault_helpers.print_nested_port(tester, tester.circuit.fst_down_out, num_nested_space_layers(ST_TSeq(32, 32, ST_SSeq(1, ST_SSeq(1, ST_TSeq(1, 2, ST_Int()))))))
        tester.print("\n")
        if f_clk >= 118:
            tester.circuit.valid_down.expect(1)
        if f_clk >= 118 and fault_output_valid[output_counter]:
            fault_helpers.expect_nested_port(tester, tester.circuit.O, fault_output[output_counter], num_nested_space_layers(ST_TSeq(4, 60, ST_SSeq(1, ST_TSeq(1, 2, ST_Int())))), 0)
        tester.step(2)
    tester.circuit.valid_down.expect(0)
    fault_helpers.compile_and_run(tester)
