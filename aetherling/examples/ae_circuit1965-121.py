import fault
import aetherling.helpers.fault_helpers as fault_helpers
from aetherling.space_time import *
from aetherling.space_time.reshape_st import DefineReshape_ST
import magma as m
import json


@cache_definition 
def Module_0() -> DefineCircuitKind:
    class _Module_0(Circuit):
        name = "Module_0"
        IO = ['I', In(ST_TSeq(1, 0, ST_SSeq(3, ST_SSeq(3, ST_Int()))).magma_repr()),'O', Out(ST_TSeq(1, 0, ST_SSeq(1, ST_Int())).magma_repr())] + ClockInterface(has_ce=False,has_reset=False) + valid_ports
        st_in_t = [ST_TSeq(1, 0, ST_SSeq(3, ST_SSeq(3, ST_Int())))]
        st_out_t = ST_TSeq(1, 0, ST_SSeq(1, ST_Int()))
        binary_op = False
        @classmethod
        def definition(cls):
            n192 = DefineConst(ST_TSeq(1, 0, ST_SSeq(3, ST_SSeq(3, ST_Int()))), ((0,1,0,1,2,1,0,1,0,),), has_valid=True, delay=1)()
            wire(cls.valid_up, n192.valid_up)
            n103 = DefineMap2_T(1, 0, DefineMap2_S(3, DefineMap2_S(3, DefineAtomTupleCreator(ST_Int(), ST_Int(), has_valid=True),True),True))()
            wire(cls.I, n103.I0)
            wire(n192.O, n103.I1)
            wire(cls.valid_up & n192.valid_down, n103.valid_up)
            n119 = DefineMap_T(1, 0, DefineMap_S(3, DefineMap_S(3, DefineLShift_Atom(True),True),True))()
            wire(n103.O, n119.I)
            wire(n103.valid_down, n119.valid_up)
            n126 = DefineMap_T(1, 0, DefineMap_S(3, DefineReduce_S(3, DefineAdd_Atom(False), has_valid=True),True))()
            wire(n119.O, n126.I)
            wire(n119.valid_down, n126.valid_up)
            n133 = DefineMap_T(1, 0, DefineReduce_S(3, DefineMap_S(1, DefineAdd_Atom(False),False), has_valid=True))()
            wire(n126.O, n133.I)
            wire(n126.valid_down, n133.valid_up)
            n136 = DefineReduce_T(1, 0, DefineMap_S(1, DefineMap_S(1, DefineAdd_Atom(False),False),False))()
            wire(n133.O, n136.I)
            wire(n133.valid_down, n136.valid_up)
            n137 = DefineReshape_ST(ST_TSeq(1, 0, ST_SSeq(1, ST_SSeq(1, ST_Int()))), ST_TSeq(1, 0, ST_SSeq(1, ST_Int())), has_valid=True)()
            wire(n136.O, n137.I)
            wire(n136.valid_down, n137.valid_up)
            n193 = DefineConst(ST_TSeq(1, 0, ST_SSeq(1, ST_Int())), (4,), has_valid=True, delay=4)()
            wire(cls.valid_up, n193.valid_up)
            n140 = DefineMap2_T(1, 0, DefineMap2_S(1, DefineAtomTupleCreator(ST_Int(), ST_Int(), has_valid=True),True))()
            wire(n137.O, n140.I0)
            wire(n193.O, n140.I1)
            wire(n137.valid_down & n193.valid_down, n140.valid_up)
            n151 = DefineMap_T(1, 0, DefineMap_S(1, DefineRShift_Atom(True),True))()
            wire(n140.O, n151.I)
            wire(n140.valid_down, n151.valid_up)
            wire(n151.O, cls.O)
            wire(n151.valid_down, cls.valid_down)
    return _Module_0

@cache_definition 
def Module_1() -> DefineCircuitKind:
    class _Module_1(Circuit):
        name = "Module_1"
        IO = ['I0', In(ST_Int().magma_repr()),'I1', In(ST_Int().magma_repr()),'O', Out(ST_Int().magma_repr())] + ClockInterface(has_ce=False,has_reset=False) + valid_ports
        st_in_t = [ST_Int(), ST_Int()]
        st_out_t = ST_Int()
        binary_op = True
        @classmethod
        def definition(cls):
            n188 = DefineConst(ST_Int(), (15,), has_valid=True, delay=4)()
            wire(cls.valid_up, n188.valid_up)
            n162 = DefineAtomTupleCreator(ST_Int(), ST_Int(), has_valid=True)()
            wire(cls.I0, n162.I0)
            wire(cls.I1, n162.I1)
            wire(cls.valid_up & cls.valid_up, n162.valid_up)
            n163 = DefineSub_Atom(True)()
            wire(n162.O, n163.I)
            wire(n162.valid_down, n163.valid_up)
            n165 = DefineAtomTupleCreator(ST_Int(), ST_Int(), has_valid=True)()
            wire(n188.O, n165.I0)
            wire(n163.O, n165.I1)
            wire(n188.valid_down & n163.valid_down, n165.valid_up)
            n166 = DefineLt_Atom(True)()
            wire(n165.O, n166.I)
            wire(n165.valid_down, n166.valid_up)
            n189 = DefineConst(ST_Int(), (15,), has_valid=True, delay=4)()
            wire(cls.valid_up, n189.valid_up)
            n167 = DefineAtomTupleCreator(ST_Int(), ST_Int(), has_valid=True)()
            wire(cls.I1, n167.I0)
            wire(cls.I0, n167.I1)
            wire(cls.valid_up & cls.valid_up, n167.valid_up)
            n168 = DefineSub_Atom(True)()
            wire(n167.O, n168.I)
            wire(n167.valid_down, n168.valid_up)
            n170 = DefineAtomTupleCreator(ST_Int(), ST_Int(), has_valid=True)()
            wire(n189.O, n170.I0)
            wire(n168.O, n170.I1)
            wire(n189.valid_down & n168.valid_down, n170.valid_up)
            n171 = DefineLt_Atom(True)()
            wire(n170.O, n171.I)
            wire(n170.valid_down, n171.valid_up)
            n172 = DefineAtomTupleCreator(ST_Bit(), ST_Bit(), has_valid=True)()
            wire(n166.O, n172.I0)
            wire(n171.O, n172.I1)
            wire(n166.valid_down & n171.valid_down, n172.valid_up)
            n173 = DefineAnd_Atom(True)()
            wire(n172.O, n173.I)
            wire(n172.valid_down, n173.valid_up)
            n190 = DefineConst(ST_Int(), (0,), has_valid=True, delay=4)()
            wire(cls.valid_up, n190.valid_up)
            n176 = DefineAtomTupleCreator(ST_Int(), ST_Int(), has_valid=True)()
            wire(n168.O, n176.I0)
            wire(n190.O, n176.I1)
            wire(n168.valid_down & n190.valid_down, n176.valid_up)
            n177 = DefineAtomTupleCreator(ST_Bit(), ST_Atom_Tuple(ST_Int(), ST_Int()), has_valid=True)()
            wire(n173.O, n177.I0)
            wire(n176.O, n177.I1)
            wire(n173.valid_down & n176.valid_down, n177.valid_up)
            n178 = DefineIf_Atom(ST_Int(), True)()
            wire(n177.O, n178.I)
            wire(n177.valid_down, n178.valid_up)
            n191 = DefineConst(ST_Int(), (2,), has_valid=True, delay=4)()
            wire(cls.valid_up, n191.valid_up)
            n181 = DefineAtomTupleCreator(ST_Int(), ST_Int(), has_valid=True)()
            wire(n178.O, n181.I0)
            wire(n191.O, n181.I1)
            wire(n178.valid_down & n191.valid_down, n181.valid_up)
            n182 = DefineRShift_Atom(True)()
            wire(n181.O, n182.I)
            wire(n181.valid_down, n182.valid_up)
            n183 = DefineAtomTupleCreator(ST_Int(), ST_Int(), has_valid=True)()
            wire(cls.I1, n183.I0)
            wire(n182.O, n183.I1)
            wire(cls.valid_up & n182.valid_down, n183.valid_up)
            n184 = DefineAdd_Atom(True)()
            wire(n183.O, n184.I)
            wire(n183.valid_down, n184.valid_up)
            wire(n184.O, cls.O)
            wire(n184.valid_down, cls.valid_down)
    return _Module_1

@cache_definition 
def Module_2() -> DefineCircuitKind:
    class _Module_2(Circuit):
        name = "top"
        IO = ['I', In(ST_TSeq(64, 0, ST_SSeq(1, ST_Int())).magma_repr()),'O', Out(ST_TSeq(64, 0, ST_SSeq(1, ST_Int())).magma_repr())] + ClockInterface(has_ce=False,has_reset=False) + valid_ports
        st_in_t = [ST_TSeq(64, 0, ST_SSeq(1, ST_Int()))]
        st_out_t = ST_TSeq(64, 0, ST_SSeq(1, ST_Int()))
        binary_op = False
        @classmethod
        def definition(cls):
            n1 = DefineFIFO(ST_TSeq(64, 0, ST_SSeq(1, ST_Int())), 1, has_valid=True)()
            wire(cls.I, n1.I)
            wire(cls.valid_up, n1.valid_up)
            n2 = DefineShift_T(64, 0, 8, ST_SSeq(1, ST_Int()), has_valid=True)()
            wire(n1.O, n2.I)
            wire(n1.valid_down, n2.valid_up)
            n3 = DefineShift_T(64, 0, 8, ST_SSeq(1, ST_Int()), has_valid=True)()
            wire(n2.O, n3.I)
            wire(n2.valid_down, n3.valid_up)
            n4 = DefineShift_T(64, 0, 1, ST_SSeq(1, ST_Int()), has_valid=True)()
            wire(n3.O, n4.I)
            wire(n3.valid_down, n4.valid_up)
            n5 = DefineShift_T(64, 0, 1, ST_SSeq(1, ST_Int()), has_valid=True)()
            wire(n4.O, n5.I)
            wire(n4.valid_down, n5.valid_up)
            n6 = DefineMap2_T(64, 0, DefineMap2_S(1, DefineSSeqTupleCreator(ST_Int(), has_valid=True),True))()
            wire(n5.O, n6.I0)
            wire(n4.O, n6.I1)
            wire(n5.valid_down & n4.valid_down, n6.valid_up)
            n13 = DefineMap2_T(64, 0, DefineMap2_S(1, DefineSSeqTupleAppender(ST_Int(), 2, has_valid=True),True))()
            wire(n6.O, n13.I0)
            wire(n3.O, n13.I1)
            wire(n6.valid_down & n3.valid_down, n13.valid_up)
            n22 = DefineMap_T(64, 0, DefinePartition_S(1, 1, ST_SSeq_Tuple(3, ST_Int()), has_valid=True))()
            wire(n13.O, n22.I)
            wire(n13.valid_down, n22.valid_up)
            n29 = DefineMap_T(64, 0, DefineMap_S(1, DefineRemove_1_S(DefineSTupleToSSeq(ST_Int(), 3, has_valid=True),True),True))()
            wire(n22.O, n29.I)
            wire(n22.valid_down, n29.valid_up)
            n30 = DefineShift_T(64, 0, 1, ST_SSeq(1, ST_Int()), has_valid=True)()
            wire(n2.O, n30.I)
            wire(n2.valid_down, n30.valid_up)
            n31 = DefineShift_T(64, 0, 1, ST_SSeq(1, ST_Int()), has_valid=True)()
            wire(n30.O, n31.I)
            wire(n30.valid_down, n31.valid_up)
            n32 = DefineMap2_T(64, 0, DefineMap2_S(1, DefineSSeqTupleCreator(ST_Int(), has_valid=True),True))()
            wire(n31.O, n32.I0)
            wire(n30.O, n32.I1)
            wire(n31.valid_down & n30.valid_down, n32.valid_up)
            n39 = DefineMap2_T(64, 0, DefineMap2_S(1, DefineSSeqTupleAppender(ST_Int(), 2, has_valid=True),True))()
            wire(n32.O, n39.I0)
            wire(n2.O, n39.I1)
            wire(n32.valid_down & n2.valid_down, n39.valid_up)
            n48 = DefineMap_T(64, 0, DefinePartition_S(1, 1, ST_SSeq_Tuple(3, ST_Int()), has_valid=True))()
            wire(n39.O, n48.I)
            wire(n39.valid_down, n48.valid_up)
            n55 = DefineMap_T(64, 0, DefineMap_S(1, DefineRemove_1_S(DefineSTupleToSSeq(ST_Int(), 3, has_valid=True),True),True))()
            wire(n48.O, n55.I)
            wire(n48.valid_down, n55.valid_up)
            n56 = DefineMap2_T(64, 0, DefineMap2_S(1, DefineSSeqTupleCreator(ST_SSeq(3, ST_Int()), has_valid=True),True))()
            wire(n29.O, n56.I0)
            wire(n55.O, n56.I1)
            wire(n29.valid_down & n55.valid_down, n56.valid_up)
            n63 = DefineShift_T(64, 0, 1, ST_SSeq(1, ST_Int()), has_valid=True)()
            wire(n1.O, n63.I)
            wire(n1.valid_down, n63.valid_up)
            n64 = DefineShift_T(64, 0, 1, ST_SSeq(1, ST_Int()), has_valid=True)()
            wire(n63.O, n64.I)
            wire(n63.valid_down, n64.valid_up)
            n65 = DefineMap2_T(64, 0, DefineMap2_S(1, DefineSSeqTupleCreator(ST_Int(), has_valid=True),True))()
            wire(n64.O, n65.I0)
            wire(n63.O, n65.I1)
            wire(n64.valid_down & n63.valid_down, n65.valid_up)
            n72 = DefineMap2_T(64, 0, DefineMap2_S(1, DefineSSeqTupleAppender(ST_Int(), 2, has_valid=True),True))()
            wire(n65.O, n72.I0)
            wire(n1.O, n72.I1)
            wire(n65.valid_down & n1.valid_down, n72.valid_up)
            n81 = DefineMap_T(64, 0, DefinePartition_S(1, 1, ST_SSeq_Tuple(3, ST_Int()), has_valid=True))()
            wire(n72.O, n81.I)
            wire(n72.valid_down, n81.valid_up)
            n88 = DefineMap_T(64, 0, DefineMap_S(1, DefineRemove_1_S(DefineSTupleToSSeq(ST_Int(), 3, has_valid=True),True),True))()
            wire(n81.O, n88.I)
            wire(n81.valid_down, n88.valid_up)
            n89 = DefineMap2_T(64, 0, DefineMap2_S(1, DefineSSeqTupleAppender(ST_SSeq(3, ST_Int()), 2, has_valid=True),True))()
            wire(n56.O, n89.I0)
            wire(n88.O, n89.I1)
            wire(n56.valid_down & n88.valid_down, n89.valid_up)
            n96 = DefineReshape_ST(ST_TSeq(64, 0, ST_SSeq(1, ST_SSeq_Tuple(3, ST_SSeq(3, ST_Int())))), ST_TSeq(64, 0, ST_TSeq(1, 0, ST_SSeq(1, ST_SSeq_Tuple(3, ST_SSeq(3, ST_Int()))))), has_valid=True)()
            wire(n89.O, n96.I)
            wire(n89.valid_down, n96.valid_up)
            n99 = DefineMap_T(64, 0, DefineReshape_ST(ST_TSeq(1, 0, ST_SSeq(1, ST_SSeq_Tuple(3, ST_SSeq(3, ST_Int())))), ST_TSeq(1, 0, ST_SSeq(3, ST_SSeq(3, ST_Int()))), has_valid=True))()
            wire(n96.O, n99.I)
            wire(n96.valid_down, n99.valid_up)
            n152 = DefineMap_T(64, 0, Module_0())()
            wire(n99.O, n152.I)
            wire(n99.valid_down, n152.valid_up)
            n153 = DefineReshape_ST(ST_TSeq(64, 0, ST_TSeq(1, 0, ST_SSeq(1, ST_Int()))), ST_TSeq(64, 0, ST_SSeq(1, ST_Int())), has_valid=True)()
            wire(n152.O, n153.I)
            wire(n152.valid_down, n153.valid_up)
            n154 = DefineFIFO(ST_TSeq(64, 0, ST_SSeq(1, ST_Int())), 3, has_valid=True)()
            wire(n1.O, n154.I)
            wire(n1.valid_down, n154.valid_up)
            n155 = DefineMap2_T(64, 0, DefineMap2_S(1, Module_1(),True))()
            wire(n153.O, n155.I0)
            wire(n154.O, n155.I1)
            wire(n153.valid_down & n154.valid_down, n155.valid_up)
            n185 = DefineFIFO(ST_TSeq(64, 0, ST_SSeq(1, ST_Int())), 1, has_valid=True)()
            wire(n155.O, n185.I)
            wire(n155.valid_down, n185.valid_up)
            n186 = DefineFIFO(ST_TSeq(64, 0, ST_SSeq(1, ST_Int())), 1, has_valid=True)()
            wire(n185.O, n186.I)
            wire(n185.valid_down, n186.valid_up)
            n187 = DefineFIFO(ST_TSeq(64, 0, ST_SSeq(1, ST_Int())), 1, has_valid=True)()
            wire(n186.O, n187.I)
            wire(n186.valid_down, n187.valid_up)
            wire(n187.O, cls.O)
            wire(n187.valid_down, cls.valid_down)
    return _Module_2

Main = Module_2
fault_inputs0 = json.load(open("/tmp/ae_input_01965-109.json"))
fault_inputs0_valid = json.load(open("/tmp/ae_in_valid_01965-110.json"))
fault_output = json.load(open("/tmp/ae_output1965-111.json"))
fault_output_valid = json.load(open("/tmp/ae_out_valid1965-112.json"))
if __name__ == '__main__':
    mod = Main()
    tester = fault.Tester(mod, clock(mod.CLK))
    tester.circuit.valid_up = 1
    output_counter = 0
    for f_clk in range(64 + 7):
        tester.print('clk: {}\n'.format(f_clk))
        if f_clk < 64 and fault_inputs0_valid[f_clk]:
            fault_helpers.set_nested_port(tester, tester.circuit.I, fault_inputs0[f_clk], num_nested_space_layers(ST_TSeq(64, 0, ST_SSeq(1, ST_Int()))), 0)
            tester.print("I: ")
            fault_helpers.print_nested_port(tester, tester.circuit.I, num_nested_space_layers(ST_TSeq(64, 0, ST_SSeq(1, ST_Int()))))
            tester.print("\n")
        tester.eval()
        if f_clk > 7:
            output_counter += 1
        tester.print("O: ")
        fault_helpers.print_nested_port(tester, tester.circuit.O, num_nested_space_layers(ST_TSeq(64, 0, ST_SSeq(1, ST_Int()))))
        tester.print("\n")
        if f_clk >= 7:
            tester.circuit.valid_down.expect(1)
        if f_clk >= 7 and fault_output_valid[output_counter]:
            fault_helpers.expect_nested_port(tester, tester.circuit.O, fault_output[output_counter], num_nested_space_layers(ST_TSeq(64, 0, ST_SSeq(1, ST_Int()))), 0)
        tester.step(2)
    fault_helpers.compile_and_run(tester)
